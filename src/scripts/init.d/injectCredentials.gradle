initscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'nu.studer:gradle-credentials-plugin:1.0.4'
    }
}

import nu.studer.gradle.credentials.domain.CredentialsPersistenceManager
import nu.studer.gradle.credentials.domain.CredentialsContainer
import nu.studer.gradle.credentials.domain.CredentialsEncryptor
import nu.studer.gradle.util.MD5
import org.slf4j.Logger
import org.slf4j.LoggerFactory

CredentialInjector injector = new CredentialInjector(gradle)
injector.injectCredentials()

class CredentialInjector {
    CredentialInjector (Gradle gradle) {
        this.gradle = gradle
    }

    Logger slf4jLogger = LoggerFactory.getLogger(CredentialInjector.class)

    Gradle gradle

    static String DEFAULT_PASSPHRASE = ">>Default passphrase to encrypt passwords!<<"
    static String DEFAULT_PASSPHRASE_CREDENTIALS_FILE = "gradle.encrypted.properties"

    static String USERNAME_KEY = 'credentialWrapperUsernameKey'
    static String PASSWORD_KEY = 'credentialWrapperPasswordKey'

    void injectCredentials() {
        String passphrase =  System.properties['credentialsPassphrase'] ?: DEFAULT_PASSPHRASE
        def credentialsFile = new File(gradle.gradleUserHomeDir, deriveFileNameFromPassphrase(passphrase))

        slf4jLogger.info("Attempting to access credentials from ${credentialsFile}")
        if (propertiesAreSet()) {
            CredentialsEncryptor credentialsEncryptor = CredentialsEncryptor.withPassphrase(passphrase.toCharArray())
            CredentialsPersistenceManager credentialsPersistenceManager = new CredentialsPersistenceManager(credentialsFile)
            CredentialsContainer credentialsContainer = new CredentialsContainer(credentialsEncryptor, credentialsPersistenceManager.readCredentials())

            def username = credentialsEncryptor.decrypt(credentialsContainer.credentials.getProperty(getKey(USERNAME_KEY)))
            def password = credentialsEncryptor.decrypt(credentialsContainer.credentials.getProperty(getKey(PASSWORD_KEY)))

            gradle.ext.credentialWrapperUsername = username
            gradle.ext.credentialWrapperPassword = password

            slf4jLogger.info("Username sucuessfully injected from ${getKey(USERNAME_KEY)} key to gradle.ext.credentialWrapperUsername")
            slf4jLogger.info("Password sucuessfully injected from ${getKey(PASSWORD_KEY)} key to gradle.ext.credentialWrapperPassword")
        } else {
            slf4jLogger.warn('WARNING: Credential key properties aren\'t set.')
            slf4jLogger.info('Credentials won\'t be injected for use via "gradle.ext.credentialWrapperUsername" & ' +
                    '"gradle.ext.credentialWrapperPassword". If you desire to use the injected username and password properties, ' +
                    'you must set the following properties in your project\'s gradle.properties file:\n' +
                    'systemProp.credentialWrapperUsernameKey=<your credential username variable key>\n' +
                    'systemProp.credentialWrapperPasswordKey=<your credential password variable key>')
        }
    }

    private boolean propertiesAreSet() {
        return getKey(USERNAME_KEY) != null &&
                getKey(PASSWORD_KEY) != null
    }

    private String getKey(String key) {
        return System.properties[key]
    }

    private String deriveFileNameFromPassphrase(String passphrase) {
        def credentialsFileName = passphrase == DEFAULT_PASSPHRASE ? DEFAULT_PASSPHRASE_CREDENTIALS_FILE : "gradle." + MD5.generateMD5Hash(passphrase) + ".encrypted.properties"
        return credentialsFileName
    }
}